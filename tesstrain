#!/bin/bash
usage()
{
    cat <<EOF
Created by tuule_                                                                                                                                       
Script crafted to generate tesseract *.traineddata files.                                                                                                     
USAGE:                                                                                                                                                        
       $(basename "$0") [-f contentfile] [-f fontdir] [-u unicharset] fontname1 [fontname2 ...]                                                               
OPTIONS:                                                                                                                                                      
      -h show this help message                                                                                                                               
      -f provides directory with *.ttf fonts. Default is .fonts/                                                                                              
      -u provides the unicharset file used to generate shapes. Default is .unicharset                                                                         
      -c provides the text file used to generate tif/box pair. Default is .content                                                                            
      -l provides the output package name. Default is engCreated by tuule_    
EOF
}

CONTENT_FILE=".content"
FONT_DIR=".fonts/"
UNICHARSET=".unicharset"
LANG="eng"

while getopts "hf:u:c:l:" OPTION; do
    case $OPTION in
	c ) CONTENT_FILE=$OPTARG;;
	
	l ) LANG=$OPTARG;;
	
	f ) FONT_DIR=$OPTARG;;
	
	u ) UNICHARSET=$OPTARG;;
	
	h ) usage
	    exit 0;;
	
	? ) usage
	    exit 1;;
    esac
done

shift $((OPTIND-1))

if [[ $# == 0 ]]; then
    echo "No input provided!"
    usage
fi

if [ ! -f $CONTENT_FILE ]; then
    echo "Content file not found!"
    exit 1
fi

if [ ! -d $FONT_DIR ]; then
    echo "Font directory not found!"
    exit 1
fi

if [ ! -f $UNICHARSET ]; then
    echo "unicharset file not found!"
    exit 1
fi

for i in "$@"; do
    fontname=$(echo $i | awk '{gsub(" ", "", $0); print}' | awk '{print tolower($0)}')
    echo "Enter the $i font properties <i><b><m><s><f>"
    read properties < /dev/stdin
    echo $fontname $properties >> font_properties
done

for i in "$@"; do
    fontname=$(echo $i | awk '{gsub(" ", "", $0); print}' | awk '{print tolower($0)}')
    echo "Generating tif/box pair for" $i "font"
    text2image --ptsize=32 --xsize=2550 --ysize=3300 --resolution=300 --text=$CONTENT_FILE --outputbase=$LANG.$fontname.exp0 --font="$i" --fonts_dir=$FONT_DIR || exit 1;
done

for i in *.tif; do
    fontname=$(echo $i | awk -F'.' '{print $2}')
    echo $LANG $fontname
    tesseract $i $LANG.$fontname.box box.train || exit 1;
done

shapeclustering -F font_properties -U .unicharset *.tr &&\
    mftraining -F font_properties -U .unicharset -O $LANG.unicharset *.tr &&\
    cntraining *.tr
mv normproto $LANG.normproto
mv inttemp  $LANG.inttemp
mv pffmtable  $LANG.pffmtable
mv shapetable  $LANG.shapetable
combine_tessdata $LANG. &&\
    echo "Succesfully generated" $LANG "package."
rm  *.box *.tif *.tr *.box.txt *.normproto *.inttemp *.shapetable $LANG.unicharset *.pffmtable font_properties
